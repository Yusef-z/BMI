{"version":3,"sources":["logo.svg","Components/Switch.js","Components/MetricVImperial.js","Components/Title.js","Components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Switch","props","className","type","onChange","statusChange","status","console","log","MetricVImperial","Title","Form","useState","BMIString","setBMIString","heightFeet","heightInches","weightLbs","heightCm","weightKg","BMI","BMIStatus","onSubmit","e","preventDefault","target","children","value","parseFloat","toFixed","min","max","maxLength","placeholder","required","App","setStatus","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87cbcdb8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\"\r\nimport \"./Switch.css\"\r\nimport {setState} from \"react\"\r\n\r\n\r\nconst Switch = (props) => {\r\n    const changeHandler = () => {\r\n        props.statusChange(!(props.status));\r\n        console.log(props.status)\r\n    }\r\n    return (\r\n        <label className = \"switch\">\r\n            <input type=\"checkbox\" onChange = {changeHandler} />\r\n            <span className = \"slider\"></span>\r\n        </label>\r\n    )\r\n}\r\n\r\n\r\nexport default Switch","import Switch from \"./Switch\"\r\nimport \"./MetricVImperial.css\"\r\nimport {setState} from \"react\"\r\n\r\n\r\nconst MetricVImperial = (props) => {\r\n    return (\r\n        <div className = \"flexContainer\">\r\n            <div className = \"midContainer\">\r\n                <h2 className = \"metric\">Metric</h2>\r\n                <Switch status = {props.status} statusChange = {props.statusChange}></Switch>\r\n                <h2 className = \"imperial\">Imperial</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default MetricVImperial","import \"./Title.css\"\r\n\r\n\r\nconst Title = () => {\r\n    return (\r\n        <div className = \"titleContainer\">\r\n            <h1>BMI CALCULATOR</h1>\r\n            <h2>By yousef</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Title;","import \"./Form.css\"\r\nimport { useState } from 'react'\r\n\r\n\r\n\r\nconst Form = (props) => {\r\n\r\n    const [BMIString, setBMIString] = useState(\"\")\r\n\r\n    const units = () => {\r\n        let result = {}\r\n        if (props.status){\r\n            result = {height: [\"feet\", \"inches\"],\r\n        weight: [\"lbs\"]}\r\n        }\r\n        else {\r\n            result = {height: \"cm\",\r\n        weight: \"kg\"}\r\n        }\r\n        return result\r\n    }\r\n\r\n    var heightFeet = 0\r\n    var heightInches = 0\r\n    var weightLbs = 0\r\n    var heightCm = 0\r\n    var weightKg = 0\r\n    var BMI = 0\r\n    var BMIStatus = \"\"\r\n\r\n    const setHeightCm = (e) => {\r\n        heightCm = e.target.value\r\n    }\r\n\r\n    const setWeightKg = (e) => {\r\n        weightKg = e.target.value\r\n    }\r\n    const setHeightFeet = (e) => {\r\n        heightFeet = e.target.value\r\n    }\r\n    const setHeightInches = (e) => {\r\n        heightInches = e.target.value\r\n    }\r\n    const setWeightLbs = (e) => {\r\n        weightLbs = e.target.value\r\n    }\r\n\r\n    const metricSubmitHandler = (e) => {\r\n        e.preventDefault()\r\n        e.target.children[0].children[1].value = \"\"\r\n        e.target.children[1].children[1].value = \"\"\r\n        BMI = parseFloat(weightKg) / ((heightCm/100.0) ** 2)\r\n        BMI = BMI.toFixed(2)\r\n        if (BMI > 40) {\r\n            BMIStatus = \"Extremely Obese\"\r\n        }\r\n        else if (BMI >= 30) {\r\n            BMIStatus = \"Obese\"\r\n        }\r\n        else if (BMI >= 25) {\r\n            BMIStatus = \"Overweight\"\r\n        }\r\n        else if (BMI >= 18.5) {\r\n            BMIStatus = \"Normal\"\r\n        }\r\n        else {\r\n            BMIStatus = \"Underweight\"\r\n        }\r\n        setBMIString(`Your Body Mass Index is ${BMI}, This is Considered ${BMIStatus}`)\r\n    }\r\n\r\n    const imperialSubmitHandler = (e) => {\r\n        e.preventDefault()\r\n        e.target.children[0].children[1].value = \"\"\r\n        e.target.children[0].children[2].value = \"\"\r\n        e.target.children[1].children[1].value = \"\"\r\n        heightInches = parseFloat(heightInches) + (parseFloat(heightFeet) * 12)\r\n        console.log(heightInches)\r\n        weightLbs = parseFloat(weightLbs) * 703 \r\n        console.log(weightLbs)\r\n        BMI = weightLbs / (heightInches ** 2)\r\n        BMI = BMI.toFixed(2)\r\n        if (BMI > 40) {\r\n            BMIStatus = \"Extremely Obese\"\r\n        }\r\n        else if (BMI >= 30) {\r\n            BMIStatus = \"Obese\"\r\n        }\r\n        else if (BMI >= 25) {\r\n            BMIStatus = \"Overweight\"\r\n        }\r\n        else if (BMI >= 18.5) {\r\n            BMIStatus = \"Normal\"\r\n        }\r\n        else {\r\n            BMIStatus = \"Underweight\"\r\n        }\r\n        setBMIString(`Your Body Mass Index is ${BMI}, This is Considered ${BMIStatus}`)\r\n    }\r\n\r\n\r\n    if (!props.status) {\r\n    return (\r\n        <div className=\"mainContainer\">\r\n            <form onSubmit = {metricSubmitHandler}>\r\n                <div className = \"heightInput\">\r\n                    <label>Enter Your Height: </label>\r\n                    <input type = \"number\" min = \"0\" max = \"999\" maxLength = \"3\" placeholder = \"cm\" required onChange={setHeightCm}></input>\r\n                </div>\r\n                <div className = \"weightInput\">\r\n                    <label>Enter Your Weight: </label>\r\n                    <input type = \"number\" min = \"0\" max = \"999\" maxLength = \"3\" placeholder = \"kg\" required onChange={setWeightKg}></input>\r\n                </div>\r\n                <button type = \"submit\" className =\"submitButton\">CALCULATE</button>\r\n            </form>\r\n            <div className = \"resultContainer\">{BMIString}</div>\r\n        </div>\r\n    )\r\n}\r\nelse {\r\n    return (\r\n        <div className=\"mainContainer\">\r\n            <form onSubmit = {imperialSubmitHandler}>\r\n                <div className = \"heightInput\">\r\n                    <label>Enter Your Height: </label>\r\n                    <input type = \"number\" min = \"0\" max = \"999\" maxLength = \"3\" placeholder = \"feet\" required onChange={setHeightFeet}></input>\r\n                    <input type = \"number\" min = \"0\" max = \"999\" maxLength = \"3\" placeholder = \"inches\" required onChange={setHeightInches}></input>\r\n                </div>\r\n                <div className = \"weightInput\">\r\n                    <label>Enter Your Weight: </label>\r\n                    <input type = \"number\" min = \"0\" max = \"999\" maxLength = \"3\" placeholder = \"lbs\" required onChange={setWeightLbs}></input>\r\n                </div>\r\n                <button type = \"submit\" className =\"submitButton\">CALCULATE</button>\r\n            </form>\r\n            <div className = \"resultContainer\">{BMIString}</div>\r\n        </div>\r\n    )\r\n}\r\n}\r\n\r\nexport default Form","import logo from './logo.svg';\nimport './App.css';\nimport Switch from \"./Components/Switch\"\nimport MetricVImperial from \"./Components/MetricVImperial\"\nimport Title from \"./Components/Title\"\nimport Form from \"./Components/Form\"\nimport { useState } from \"react\"\n\n\nfunction App() {\n  const [status, setStatus] = useState(false);\n  return (\n    <div className=\"App\">\n      <Title></Title>\n      <MetricVImperial status = {status} statusChange = {setStatus}/>\n      <Form status = {status}></Form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}